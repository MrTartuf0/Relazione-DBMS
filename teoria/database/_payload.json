[{"data":1,"prerenderedAt":97},["Reactive",2],{"search-api":3},[4,11,26,35,45,59,67,77,87],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Database & DBMS   Questa relazione ti spiegerà i seguenti concetti:      Parte teorica  con spiegazione DB (modellizzazione, tipi di associazioni, tipi di chiavi), DBMS (con i suoi moduli), piattaforma EasyPhp;   Parte pratica  con spiegazione installazione e primo utilizzo EasyPhp, impostazioni iniziali my.ini e motori di memorizzazione, creazione db, creazione campi (con specifica tipo dati e attributi), chiavi primarie, chiavi esterne e relazioni;  modalità di salvataggio, apertura e gestione del DB (importa / esporta / operazioni);  inserimento record.",{"id":12,"path":13,"dir":14,"title":15,"description":16,"keywords":17,"body":25},"content:1.teoria:1.database.md","/teoria/database","teoria","Database","Le basi di dati, o database, sono archivi di dati organizzati e progettati con tecniche di modellazione dati, gestiti su memorie di massa dei computer attraverso software specializzati. L'obiettivo è manipolare e recuperare i dati in modo efficiente, superando le limitazioni degli archivi tradizionali.",[18,19,20,21,22,23,24],"I Record e i Campi","Chiave Primaria","Chiave Esterna","Cardinalità:","Obbligatorietà e Opzionalità:","Proprietà di un DB","Differenze tra DB Relazionale e NoSQL","  Database  Le basi di dati, o database, sono archivi di dati organizzati e progettati con tecniche di modellazione dati, gestiti su memorie di massa dei computer attraverso software specializzati. L'obiettivo è manipolare e recuperare i dati in modo efficiente, superando le limitazioni degli archivi tradizionali.    I Record e i Campi  Un file è una collezione di   record , cioè di informazioni logicamente omogenee che\ndescrivono i singoli elementi di una realtà considerata. Ogni record è composto da un insieme di   campi  che contengono i valori assunti dalle caratteristiche scelte per descrivere la realtà.    Chiave Primaria  La chiave primaria (PK) è un campo o un insieme di campi in una tabella di database che identifica univocamente ogni record. Viene rappresentata graficamente con la sigla   PK (Primary Key)  e sottolineata con una   riga dritta .    Chiave Esterna  La chiave esterna (FK) è un campo in una tabella del database che stabilisce una relazione con la chiave primaria di un'altra tabella. Viene rappresentata con la sigla   FK (Foreign Key)  e sottolineata con una   riga ondulata . La chiave esterna crea un legame tra le tabelle consentendo di stabilire relazioni tra i dati.  Cardinalità:    Uno a Uno (1:1):    Descrizione : Ogni record in una tabella è associato a un solo record nell'altra tabella e viceversa.   Esempio Pratico : Relazione tra una tabella \"Dipendenti\" e una tabella \"Badge\" dove ogni dipendente ha un solo badge e ogni badge è assegnato a un solo dipendente.   Uno a Molti (1:N) :    Descrizione : Ogni record in una tabella è associato a molti record nell'altra tabella, ma ogni record in quest'ultima è associato a un solo record nella prima tabella.   Esempio Pratico : Relazione tra una tabella \"Cliente\" e una tabella \"Ordini\" dove ogni cliente può avere molti ordini, ma ogni ordine è effettuato da un solo cliente.   Molti a Molti (N:M) :    Descrizione : Molti record in una tabella sono associati a molti record nell'altra tabella.   Esempio Pratico : Relazione tra una tabella \"Studenti\" e una tabella \"Corsi\" dove uno studente può iscriversi a molti corsi e ogni corso può avere molti studenti.  Obbligatorietà e Opzionalità:    Obbligatorio (1 o N -|---) :    Descrizione : L'entità nel lato \"1\" o \"N\" è obbligatoria per ogni record nell'entità associata.   Esempio Pratico : In una relazione \"Dipendenti\" (1) e \"Badge\" (N), ogni dipendente deve avere almeno un badge.   Opzionale (0 o N -|---) :    Descrizione : L'entità nel lato \"0\" o \"N\" è opzionale per ogni record nell'entità associata.   Esempio Pratico : In una relazione \"Cliente\" (0) e \"Ordini\" (N), un cliente può non avere alcun ordine associato.   Obbligatorio in Entrambi (1 -|--| 1) :    Descrizione : Entrambe le entità nella relazione sono obbligatorie per ogni record associato.   Esempio Pratico : In una relazione \"Studenti\" (1) e \"Corsi\" (1), ogni corso deve avere almeno uno studente e ogni studente deve essere iscritto a almeno un corso.  Questi concetti aiutano a definire in modo più preciso le relazioni tra le tabelle di un database, consentendo una gestione accurata dei dati e delle connessioni tra di essi.  Proprietà di un DB      Eliminazione della ridondanza e dell'inconsistenza : I dati non sono duplicati in archivi separati, evitando campi uguali con valori diversi.   Facilità di accesso ai dati : Il recupero dei dati è rapido e trasparente, anche in database di grandi dimensioni con richieste simultanee da parte di più utenti.   Interrogazioni non predefinite : È possibile interrogare i dati con un linguaggio semplice e standard, facilitando la costruzione di nuove interrogazioni.   Integrità dei dati : I vincoli di integrità sono memorizzati e controllati dal Database Management System (DBMS), garantendo la coerenza dei dati e prevenendo anomalie.   Indipendenza dalla struttura logica e fisica dei dati : I programmi applicativi sono indipendenti dalla struttura logica dei dati, consentendo modifiche alla definizione delle strutture della base di dati senza alterare il software applicativo.   Utilizzo da più utenti e controllo della concorrenza : Il database può essere utilizzato da più utenti contemporaneamente, e il DBMS gestisce le operazioni in modo che non interferiscano tra loro.   Sicurezza dei dati : Vengono implementate procedure di controllo per prevenire accessi non autorizzati e proteggere i dati da guasti accidentali.  Differenze tra DB Relazionale e NoSQL    DB Relazionale:   Struttura dati:  Utilizzano tabelle per organizzare i dati in righe e colonne, con relazioni definite tra le tabelle.   Schema fisso:  Richiedono uno schema fisso che determina la struttura dei dati prima dell'inserimento.   Query SQL:  Utilizzano il linguaggio SQL (Structured Query Language) per interrogare e manipolare i dati.   Scalabilità verticale:  La scalabilità è spesso gestita attraverso l'aumento delle risorse hardware su un singolo server.  Database Non Relazionale (NoSQL):   Struttura dati flessibile:  Utilizzano diversi modelli di dati, come documenti, chiavi-valore, colonne o grafi, offrendo una maggiore flessibilità nella rappresentazione delle informazioni.   Schema dinamico:  Possono gestire dati con schemi dinamici, consentendo l'inserimento di nuovi campi senza la necessità di uno schema fisso predefinito.   Query specifiche del database:  Utilizzano spesso query specifiche del database o un linguaggio di interrogazione ad hoc per accedere e manipolare i dati.   Consistenza eventualmente consistente:  Alcuni database NoSQL sacrificano la coerenza immediata per garantire una maggiore disponibilità e tolleranza agli errori, seguendo il modello di consistenza eventualmente consistente.   Scalabilità orizzontale:  Sono progettati per scalare orizzontalmente, distribuendo il carico su più server per gestire volumi di dati e carichi di lavoro crescenti.  DB Non Relazionale (NoSQL):   Struttura dati flessibile:  Utilizzano diversi modelli di dati, come documenti, chiavi-valore, colonne o grafi, offrendo una maggiore flessibilità nella rappresentazione delle informazioni.   Schema dinamico:  Possono gestire dati con schemi dinamici, consentendo l'inserimento di nuovi campi senza la necessità di uno schema fisso predefinito.   Query specifiche del database:  Utilizzano spesso query specifiche del database o un linguaggio di interrogazione ad hoc per accedere e manipolare i dati.   Consistenza eventualmente consistente:  Alcuni database NoSQL sacrificano la coerenza immediata per garantire una maggiore disponibilità e tolleranza agli errori, seguendo il modello di consistenza eventualmente consistente.   Scalabilità orizzontale:  Sono progettati per scalare orizzontalmente, distribuendo il carico su più server per gestire volumi di dati e carichi di lavoro crescenti.",{"id":27,"path":28,"dir":14,"title":29,"description":30,"keywords":31,"body":34},"content:1.teoria:2.dbms.md","/teoria/dbms","DBMS","Un Database Management System (DBMS) è un software progettato per creare, gestire e facilitare l'accesso e l'uso di un database. La sua funzione principale è consentire agli utenti di interagire con il database in modo efficiente, fornendo strumenti per l'inserimento, l'aggiornamento, la gestione e l'interrogazione dei dati.",[32,33],"Caratteristiche di un DBMS","Esempi di DBMS","  DBMS  Un   Database Management System  (DBMS) è un software progettato per creare, gestire e facilitare l'accesso e l'uso di un database. La sua funzione principale è consentire agli utenti di interagire con il database in modo efficiente, fornendo strumenti per l'inserimento, l'aggiornamento, la gestione e l'interrogazione dei dati.  Caratteristiche di un DBMS  Un Database Management System (DBMS) deve svolgere le seguenti funzioni:  Definizione dei dati: Permettere la creazione di una nuova base di dati, definendo gli archivi, la loro struttura, le relazioni logiche, gli accessi limitati e i vincoli. Questa operazione avviene tramite un linguaggio specifico chiamato   Data Definition Language (DDL) .  Manipolazione dei dati: Agevolare gli utenti nell'inserimento, cancellazione e modifica dei dati nel database attraverso un linguaggio dedicato chiamato   Data Manipulation Language (DML) .  Interrogazione del database: Consentire l'estrazione di informazioni interrogando la base dati mediante un linguaggio di interrogazione noto come   Query Language (QL) .  Semplicità e standardizzazione: Eseguire tutte le operazioni sopra menzionate utilizzando un linguaggio semplice, apprendibile e standardizzato. Ciò facilita agli utenti il passaggio da un DBMS a un altro senza difficoltà.  In breve, il DBMS fornisce gli strumenti e i linguaggi necessari per definire, manipolare e interrogare un database in modo efficace e standardizzato.  Esempi di DBMS     Access : Un sistema di gestione del database relazionale sviluppato da Microsoft, comunemente utilizzato in ambienti aziendali e aziendali.   MySQL : Un DBMS open source molto popolare, noto per la sua velocità e affidabilità. È spesso utilizzato in applicazioni web e in ambienti di sviluppo software.   Oracle Database : Un sistema di gestione del database relazionale sviluppato da Oracle Corporation, utilizzato ampiamente in ambienti aziendali e di grandi dimensioni.   PostgreSQL : Un sistema di gestione del database relazionale open source noto per la sua conformità agli standard e le funzionalità avanzate.   SQLite : Un DBMS leggero e incorporato che non richiede un processo separato e può essere integrato direttamente nelle applicazioni. È comunemente utilizzato in applicazioni mobili e embedded.   MongoDB : Un sistema di gestione del database non relazionale (NoSQL) orientato ai documenti, progettato per gestire grandi volumi di dati e spesso utilizzato in applicazioni web.   MariaDB : Un fork di   MySQL  che è diventato un sistema di gestione del database open source indipendente con il suo sviluppo attivo.",{"id":36,"path":37,"dir":14,"title":38,"description":39,"keywords":40,"body":44},"content:1.teoria:3.modelli-db.md","/teoria/modelli-db","Modelli DB","Il database rappresenta un modello della realtà, riflettendo gli stati e gli eventi dell'ambiente aziendale. I dati sono descritti attraverso modelli, tra cui il concettuale, logico e fisico. La progettazione iniziale del database è cruciale e indipendente da hardware, supporti fisici e caratteristiche del DBMS. Questo approccio consente al database di evolversi nel tempo, adattandosi alle esigenze e alle informazioni in continua crescita.",[41,42,43],"Modello concettuale","Il modello logico","Il modello fisico","  Modelli DB  Il database rappresenta un modello della realtà, riflettendo gli stati e gli eventi dell'ambiente aziendale. I dati sono descritti attraverso modelli, tra cui il   concettuale, logico e fisico . La progettazione iniziale del database è cruciale e indipendente da hardware, supporti fisici e caratteristiche del DBMS. Questo approccio consente al database di evolversi nel tempo, adattandosi alle esigenze e alle informazioni in continua crescita.    Modello concettuale  Il modello concettuale, noto come modello Entità/Associazioni (E/R), è utilizzato per la progettazione concettuale dei database. Si basa sull'identificazione di   1.entità ,   2.associazioni  e   3.attributi  in una entità. Le entità rappresentano gli oggetti, gli attributi sono le caratteristiche delle entità, e le associazioni descrivono le relazioni logiche tra le entità. Questi elementi sono rappresentati graficamente in un diagramma E/R, offrendo una visualizzazione chiara della struttura e delle relazioni nel contesto della progettazione del database.    Il modello logico  Il modello logico, detto anche modello a livello di record, si sviluppa dallo schema concettuale Entità/Associazioni e si concentra sulle strutture che organizzano i dati per consentire operazioni di manipolazione e interrogazione. Tre modelli principali a livello di record emersi negli anni Sessanta sono il modello   gerarchico , il modello   reticolare  e il modello   relazionale . Nel modello relazionale, in particolare, le basi di dati sono organizzate in tabelle con relazioni definite tra di loro. Questo modello ha prevalso e ha guidato lo sviluppo di numerosi software DBMS, diventando dominante anche nei personal computer. Nei modelli gerarchico e reticolare, le associazioni tra entità sono rappresentate mediante puntatori che collegano i record correlati.  Il   modello relazionale  si fonda su concetti matematici e privilegia l'uso rigoroso del   linguaggio matematico  con due obiettivi principali: utilizzare un linguaggio universalmente noto e eliminare ambiguità nella terminologia e simbologia. Questo modello, basato sui valori, descrive le associazioni tra entità esclusivamente attraverso i valori nei campi delle tabelle, senza ricorrere all'uso di puntatori.  Il modello fisico  Il modello fisico dei dati descrive concretamente come un modello logico sia implementato sulle memorie di massa del computer. Nel contesto del modello relazionale, specifica la   realizzazione delle tabelle , l'implementazione dei   vincoli  sui dati, la rappresentazione delle   associazioni  tra tabelle, la creazione di   indici  sui campi e   altri dettagli . Il modello fisico affronta questioni gestite dai progettisti di un particolare DBMS. Esempi di DBMS che gestiscono i modelli fisici dei dati includono Oracle, DB2, MySQL, SQL Server e Access.",{"id":46,"path":47,"dir":14,"title":48,"description":49,"keywords":50,"body":58},"content:1.teoria:4.progettazione-concettuale.md","/teoria/progettazione-concettuale","Le 7 Regole di Derivazione","Il modello concettuale è spesso rappresentato attraverso diagrammi e schemi che catturano i concetti e le relazioni chiave nel dominio del problema senza considerare dettagli implementativi. Una volta definito il modello concettuale, l'obiettivo è trasformarlo in un modello relazionale, dove le entità diventano relazioni.",[51,52,53,54,55,56,57],"Ⅰ Regola","Ⅱ Regola","Ⅲ Regola","Ⅳ Regola","Ⅴ Regola","Ⅵ Regola","Ⅶ Regola","  Le 7 Regole di Derivazione  Il modello concettuale è spesso rappresentato attraverso diagrammi e schemi che catturano i concetti e le relazioni chiave nel dominio del problema senza considerare dettagli implementativi. Una volta definito il modello concettuale, l'obiettivo è trasformarlo in un modello relazionale, dove le entità diventano relazioni.  Le 7 regole di derivazione sono utili in questa fase di trasformazione poiché forniscono linee guida specifiche per la progettazione di tabelle, chiavi primarie, chiavi esterne e altre caratteristiche chiave del modello relazionale.    Ⅰ Regola   1. ogni entità diventa una relazione;\n  Ⅱ Regola   2. ogni attributo di un’entità diventa un attributo \n   della relazione, cioè il nome di una colonna\n   della tabella;\n  Ⅲ Regola   3. ogni attributo della relazione eredita le caratteristiche\n   dell’attributo dell’entità da cui deriva;\n  Ⅳ Regola   4. l’identificatore univoco di un’entità diventa la chiave\n   primaria della relazione derivata;\n  Ⅴ Regola   5. l’associazione uno a uno diventa un’unica relazione \n   che contiene gli attributi della prima e della \n   seconda entità, salvo alcune eccezioni;\n  Ⅵ Regola   6. l’associazione uno a molti viene rappresentata \n   aggiungendo agli attributi dell’entità che svolge \n   il ruolo a molti l’identificatore univoco dell’entità \n   che svolge il ruolo a uno nell’associazione. \n   Questo identificatore, che prende il nome di \n   chiave esterna dell’entità associata, è costituito \n   dall’insieme di attributi che compongono la chiave \n   dell’entità a uno dell’associazione. Gli eventuali \n   attributi dell’associazione vengono inseriti nella \n   relazione che rappresenta l’entità a molti, assieme \n   alla chiave esterna;\n  Ⅶ Regola   7. l’associazione molti a molti diventa una nuova \n   relazione (in aggiunta alle relazioni derivate \n   dalle entità) composta dagli identificatori univoci \n   delle due entità e dagli eventuali attributi \n   dell’associazione. La chiave della nuova relazione \n   è formata dall’insieme di attributi che compongono \n   le chiavi delle due entità, oltre agli eventuali \n   attributi dell’associazione necessari a garantire \n   l’unicità delle n-uple nella relazione ottenuta.\n",{"id":60,"path":61,"dir":62,"title":63,"description":7,"keywords":64,"body":66},"content:2.pratica:1.Installazione.md","/pratica/installazione","pratica","Installazione",[63,65],"Risoluzione degli errori","  Installazione  Ecco la procedura eseguita in classe per l'installazione di EasyPHP   1. Scarica il software:   Visitare il sito ufficiale di EasyPHP   https://www.easyphp.org/  o la pagina di   download .  Selezionare la versione DEV Server, e non Web Server\n    2. Avvia l'installazione:   Dopo aver scaricato il file di installazione, eseguilo facendo doppio clic.  Segui le istruzioni guidate fornite dal programma di installazione.   3. Configura le opzioni:  Durante l'installazione, potresti essere richiesto di configurare alcune opzioni come la directory di installazione e le componenti specifiche da installare (Apache, PHP, MySQL, ecc.).     4. Completa l'installazione:  Attendi il completamento dell'installazione.   5. Avvia EasyPHP:  Dopo l'installazione, avvia EasyPHP utilizzando l'icona o il menu Start del tuo sistema operativo.  Risoluzione degli errori    Nota Bene:   in alcune installazioni dopo l'avvio di EasyPHP potrebbe dare il seguente errore:   msvcr110.dll is missing  per risolvere questo problema è necessario seguire la soluzione proposta da un utente su   StackOverflow  , dove basta solo scaricare il seguente file:   vcredist_x86.exe",{"id":68,"path":69,"dir":62,"title":70,"description":7,"keywords":71,"body":76},"content:2.pratica:2.configurazione.md","/pratica/configurazione","Configurazione",[72,73,74,75],"Avvio","Alterazione della porta Apache","Cambio dello Storage Engine","Avvio di phpMyAdmin","  Configurazione  Avvio       Avvia EasyPHP:   Fai doppio clic sull'icona di EasyPHP.  Se non si apre nulla, non preoccuparti. EasyPHP si avvia come task in background.   Apri dalla Tray di Windows:   Vai sulla tray di Windows (area vicino all'orologio).  Trova l'icona di EasyPHP.  Fai clic destro sull'icona di EasyPHP.   Apri il Pannello Web:   Nel menu contestuale, seleziona \"Open Dashboard\".\nQuesto dovrebbe aprire il pannello web di EasyPHP all'indirizzo locale   http://127.0.0.1:1111/ .  Seguendo questi passaggi, dovresti poter accedere al pannello di controllo di EasyPHP e gestire le tue impostazioni, database e servizi web.  Alterazione della porta Apache      Accedi al Pannello delle Applicazioni:  Nella dashboard di EasyPHP, cerca opzioni come \"Http Server\" o \"Apache\". Queste opzioni possono variare a seconda della versione specifica di EasyPHP.   Modifica della Porta:   Cerca una sezione o un'opzione che ti permetta di modificare la porta di Apache.  Modifica la porta predefinita a 8080 o qualsiasi altra porta desiderata.   Riavvio di Apache :   Successivamente, cerca un pulsante o un'opzione per riavviare Apache attraverso l'interfaccia web di EasyPHP, oppure avvialo se non lo avevi già avviato in precedenza.  Cambio dello Storage Engine     Accedi al Menu Applicazioni di EasyPHP:   Fai clic sull'icona di EasyPHP per aprire il menu delle   applicazioni .  Seleziona il Database Server MySQL:   Nel menu a tendina, trova e seleziona   db server .\nSuccessivamente, scegli   MySQL 5.7.17 x86  o la versione specifica che stai utilizzando.  Apri il File di Configurazione:   Clicca sul pulsante   Configuration File  per aprire il file di configurazione di MySQL.  Modifica la Linea dello Storage Engine di Default:   All'interno del file di configurazione, cerca la linea che assegna il motore di memorizzazione di default. Potrebbe assomigliare a:     default-storage-engine = MyISAM\n   Modifica il valore a quello desiderato, ad esempio, se vuoi utilizzare il motore InnoDB:     default-storage-engine = InnoDB\n  Salva le Modifiche:   Salva le modifiche apportate al file di configurazione.  Riavvio del Server MySQL:   Riavvia il server MySQL attraverso l'interfaccia di EasyPHP o utilizzando altri metodi disponibili nell'ambiente EasyPHP.\nRicorda che le modifiche ai motori di memorizzazione potrebbero richiedere il riavvio del server MySQL per essere applicate. Verifica che le modifiche siano effettive dopo il riavvio del server.  Avvio di phpMyAdmin     Avvia Apache   Web Server  e MySQL   Database Server :   Assicurati di avviare sia il server Apache che il server MySQL attraverso l'interfaccia di EasyPHP.  Attendere pazientemente che i server si avviino correttamente.  Apri phpMyAdmin dall'Interfaccia di EasyPHP:   Dopo l'avvio dei server, fai clic sul pulsante   Open  accanto a   MySQL Administration: PhpMyAdmin 4.7.0  nell'interfaccia di EasyPHP.  Accesso a phpMyAdmin:   L'interfaccia web di phpMyAdmin dovrebbe aprirsi automaticamente nel tuo browser predefinito.  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":78,"path":79,"dir":62,"title":80,"description":7,"keywords":81,"body":86},"content:2.pratica:3.Creazione.md","/pratica/creazione","Creazione",[82,83,84,85],"Creazione di un database","Creazione di una tabella","Creazione dei campi","Creazione di una relazione","  Creazione  Creazione di un database  Per creare un database utilizzando phpMyAdmin, segui questi passaggi:   Accedi a phpMyAdmin attraverso il tuo browser. Di solito, puoi farlo digitando l'URL appropriato nel tuo browser. Ad esempio, se stai utilizzando un server locale, potrebbe essere qualcosa come   http://127.0.0.1:8080/eds-modules/phpmyadmin470x231003130246/ .    Una volta connesso a phpMyAdmin, cerca e fai clic sulla scheda   Database  nella parte superiore della pagina, oppure cliccando il bottone   Nuovo  con l'icona del database concatenato al simbolo più.    Nella sezione \"Crea database\", inserisci il nome desiderato per il tuo nuovo database nel campo di testo. Seleziona il set di caratteri e il collation per il tuo database. Puoi lasciare i valori Spredefiniti o selezionarne uno in base alle tue esigenze.    Fai clic sul pulsante \"Crea\" per creare il nuovo database.  Una volta completati questi passaggi, avrai creato con successo un nuovo database utilizzando phpMyAdmin. Puoi quindi iniziare a creare tabelle e inserire dati secondo le tue esigenze.    Creazione di una tabella     Accedi a phpMyAdmin e seleziona il tuo   database  dalla barra laterale sinistra.  Fai clic su   Nuova  nel menu laterale o, se hai già selezionato il database, fai clic su   Struttura .  Nel campo   Nome , inserisci il nome desiderato per la tua tabella.  Seleziona il   numero di campi  che vuoi nella tua tabella.  Fai clic su   Esegui  per creare la nuova tabella con le specifiche fornite.  Ora sei pronto per definire la struttura della tua tabella, includendo i nomi dei campi, i tipi di dati e altre proprietà specifiche. Una volta completata la definizione della struttura, puoi salvare la tabella nel tuo database.  Creazione dei campi  una volta creata la propria tabella dovresti essere arrivato ad un interfaccia simile alla seguente:    ecco una spiegazione delle opzioni selezionabili:    Nome : Il nome del campo, univoco all'interno della tabella.   Tipo : Il tipo di dati che il campo può contenere. Ad esempio:     Tipo  Dimensione massima/formato  Descrizione    BigInt  intero lunghissimo  INTERI da -2^63 a 2^63-1   Integer  intero lungo  INTERO lungo da -2^31 a 2^31-1   Smallint  intero  INTERO da -32768 a 32767   Tinyint  intero ridotto  INTERO ridotto da -128 a +127   Double  Reale a doppia precisione  REALI da 12.225  10^-3 a 1.798 10^308   Float  Reale a singola precisione  REALI da 11.176  10^-38 a 3.403 10^38   Decimal  Decimale memorizzato come stringa  DECIMAL da 12.225  10^-3 a 1.798 10^308   Date  Data in formato US (aaaa-mm-gg)  DATA dal '1000-01-01' a '9999-12-31'   Time  Orario formato HH:MM:SS  ORA da '00:00:00' a '23:59:59'   Datetime  Data con ora aaaa-mm-gg hh:mm:ss  DATA con ORA dal '1000-01-01 00:00:00' a '9999-12-31 23:59:59'   Year  Anno formato AAAA  ANNO da '0001' a '9999'   Character  Stringa a lunghezza fissa  STRINGA da 0 a 255 caratteri   Varchar  Stringa a lunghezza variabile  STRINGA da 0 a 255 caratteri   Text  Campo testo a lunghezza fissa  CAMPO TESTO da 0 a 65535 caratteri   Mediumtext  Campo testo (memo) 16 MB di caratteri  CAMPO TESTO da 0 a 16777215 caratteri   Blob  Immagini jpeg, bmp, gif (Binary Large Object) o file binary in esadecimale o di testo OGGETTI fino a 64 KB  IMMAGINI JPEG, BMP, GIF o FILE BINARY da 0 a 65535 byte   Medium blob  Fino a 16 MB  OGGETTI fino a 16 MB   Long blob  Circa 4 GB  OGGETTI fino a circa 4 GB    Lunghezza valori : Specifica la lunghezza massima dei valori memorizzati nel campo. Questo è spesso applicabile a tipi di dati come VARCHAR.   Predefinito : Il valore predefinito del campo. Questo valore viene assegnato se nessun valore è specificato quando si inserisce una nuova riga nella tabella. Opzioni comuni includono:    Nessuno : Nessun valore predefinito.   Come definito : Utilizza il valore predefinito predefinito per il tipo di dati.   NULL : Imposta il valore predefinito su NULL.   CURRENT_TIMESTAMP : Imposta il valore predefinito sulla data e ora correnti.   Attributi : Opzioni aggiuntive che possono essere applicate al campo, ad esempio:    Binary : Indica che il campo è di tipo binario.   Unsigned : Il campo accetta solo valori positivi.   Unsigned Zerofill : Se il valore è positivo, viene riempito con zeri a sinistra.   Indice : Specifica il tipo di indice applicato al campo:    Primary : Chiave primaria, univoca per ogni riga nella tabella.   Unique : Valori univoci, ma può contenere valori NULL.   Index : Indice standard, utilizzato per le foreign key.   Fulltext : Indice di testo completo, spesso utilizzato per ricerche di testo libero.   Spatial : Utilizzato per colonne che contengono dati spaziali.   AI (Auto Increment) : Se selezionato, il campo è un campo auto-incrementante, il che significa che il valore viene incrementato automaticamente per ogni nuova riga inserita nella tabella.  Tuttavia, è importante notare che l'opzione Auto Increment può essere utilizzata solo su campi di tipo intero e non può essere applicata a campi che fungono da chiavi esterne (FK). Questa restrizione è dovuta al fatto che i valori delle chiavi esterne devono corrispondere esattamente ai valori presenti nella chiave primaria della tabella correlata. In questo modo, l'auto-incremento è comunemente associato a campi chiave primaria per garantire unico e progressivo identificativo per ogni record.  Una volta che hai configurato i campi secondo le tue esigenze, puoi fare clic sul pulsante   Salva  per applicare le modifiche e creare la tabella nel database.  Creazione di una relazione     Accedi a phpMyAdmin e seleziona il database desiderato.  Nel menu laterale a sinistra, fai clic su   Designer  per visualizzare la panoramica grafica delle tabelle nel tuo database.  Trova la tabella dalla quale desideri creare la relazione, se non riesci a visualizzarla, ritorna sulla barra laterale e seleziona   Mostra/Nascondi la lista delle tabelle , ed abilita le tabelle nascoste, successivamente fai clic sull'icona   Relazioni  (rappresentata da una linea che collega due tabelle).  Nella finestra delle relazioni, fai clic su \"Crea relazione\".  Seleziona la tabella di destinazione con cui desideri stabilire la relazione.  Collega la   chiave primaria  della tabella corrente con la   chiave esterna  della tabella di destinazione. Fai clic sulla chiave primaria e quindi sulla chiave esterna corrispondente.  Configura i dettagli della relazione, come l'opzione   ON DELETE  e   ON UPDATE , per semplicità sceglieremo la voce   CASCADE  in entrambi i campi.  Fai clic su \"OK\" per applicare la relazione.",{"id":88,"path":89,"dir":62,"title":90,"description":91,"keywords":92,"body":96},"content:2.pratica:4.Importazione&Esportazione.md","/pratica/importazioneandesportazione","Importazione & Esportazione","L'importazione ed esportazione di un database è un processo comune per spostare dati tra diverse istanze di database o per creare copie di backup. Le operazioni di importazione ed esportazione possono essere eseguite utilizzando varie opzioni e strumenti a seconda del sistema di gestione del database (DBMS) che stai utilizzando.",[93,94,95],"Esportazione di un Database:","Importazione di un Database:","Contenuto del File SQL","  Importazione & Esportazione  L'importazione ed esportazione di un database è un processo comune per spostare dati tra diverse istanze di database o per creare copie di backup. Le operazioni di importazione ed esportazione possono essere eseguite utilizzando varie opzioni e strumenti a seconda del sistema di gestione del database (DBMS) che stai utilizzando.    Esportazione di un Database:   Accedi a phpMyAdmin e seleziona il database che desideri esportare.  Vai alla scheda   Esporta  e seleziona le tabelle che vuoi esportare.  Configura le opzioni di esportazione secondo le tue esigenze, noi utilizzeremo il   formato SQL .  Clicca su   Esegui  per scaricare il file di esportazione SQL.  Importazione di un Database:   Accedi a phpMyAdmin e seleziona il database di destinazione.  Vai alla scheda   Importa  e carica il file SQL che desideri importare.  Clicca su   Esegui  per avviare il processo di importazione.  Contenuto del File SQL  Un file SQL (Structured Query Language) è un file di testo che contiene una serie di istruzioni SQL. SQL è un linguaggio di programmazione utilizzato per interagire con i database relazionali. All'interno di un file SQL, puoi trovare diverse tipologie di istruzioni, tra cui:    Istruzioni di Creazione di Tabelle (CREATE TABLE) : Definiscono la struttura di una tabella nel database, specificando i nomi delle colonne, i tipi di dati, i vincoli di chiave primaria o esterna, e altre proprietà.  Esempio:   CREATE TABLE Utenti (\n    ID INT PRIMARY KEY,\n    Nome VARCHAR(50),\n    Email VARCHAR(100)\n);\n    Istruzioni di Inserimento di Dati (INSERT INTO) : Aggiungono nuovi dati a una tabella esistente.  Esempio:   INSERT INTO Utenti (ID, Nome, Email)\nVALUES (1, 'Mario Rossi', 'mario@email.com');\n    Istruzioni di Selezione (SELECT) : Recuperano dati da una o più tabelle.  Esempio:   SELECT Nome, Email FROM Utenti WHERE ID = 1;\n    Istruzioni di Aggiornamento (UPDATE) : Modificano i dati esistenti in una tabella.  Esempio:   UPDATE Utenti SET Email = 'nuova@email.com' WHERE ID = 1;\n    Istruzioni di Eliminazione (DELETE) : Rimuovono dati da una tabella.  Esempio:   DELETE FROM Utenti WHERE ID = 1;\n    Altre Istruzioni di Gestione del Database (es. ALTER, DROP, GRANT, etc.) : Possono essere utilizzate per modificare la struttura del database, eliminare tabelle, concedere autorizzazioni, ecc.  I file SQL sono spesso utilizzati per eseguire script di database, per esportare e importare dati, o per definire la struttura di un database. Sono essenziali per la gestione dei database relazionali e forniscono un modo standardizzato per interagire con i sistemi di gestione di database (DBMS).  ",1700639905311]